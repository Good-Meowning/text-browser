diff --git a/node_modules/blessed/lib/widgets/screen.js b/node_modules/blessed/lib/widgets/screen.js
index 9d76e58..36ceeb9 100644
--- a/node_modules/blessed/lib/widgets/screen.js
+++ b/node_modules/blessed/lib/widgets/screen.js
@@ -30,6 +30,7 @@ var Box = require('./box');
  */
 
 function Screen(options) {
+  console.log('in screen')
   var self = this;
 
   if (!(this instanceof Node)) {
@@ -141,7 +142,7 @@ function Screen(options) {
     _hidden: true
   };
 
-  this.program.on('resize', function() {
+  this.program.on('resize', function () {
     self.alloc();
     self.render();
     (function emit(el) {
@@ -150,15 +151,15 @@ function Screen(options) {
     })(self);
   });
 
-  this.program.on('focus', function() {
+  this.program.on('focus', function () {
     self.emit('focus');
   });
 
-  this.program.on('blur', function() {
+  this.program.on('blur', function () {
     self.emit('blur');
   });
 
-  this.program.on('warning', function(text) {
+  this.program.on('warning', function (text) {
     self.emit('warning', text);
   });
 
@@ -194,7 +195,7 @@ Screen.total = 0;
 
 Screen.instances = [];
 
-Screen.bind = function(screen) {
+Screen.bind = function (screen) {
   if (!Screen.global) {
     Screen.global = screen;
   }
@@ -208,34 +209,34 @@ Screen.bind = function(screen) {
   if (Screen._bound) return;
   Screen._bound = true;
 
-  process.on('uncaughtException', Screen._exceptionHandler = function(err) {
+  process.on('uncaughtException', Screen._exceptionHandler = function (err) {
     if (process.listeners('uncaughtException').length > 1) {
       return;
     }
-    Screen.instances.slice().forEach(function(screen) {
+    Screen.instances.slice().forEach(function (screen) {
       screen.destroy();
     });
     err = err || new Error('Uncaught Exception.');
     console.error(err.stack ? err.stack + '' : err + '');
-    nextTick(function() {
+    nextTick(function () {
       process.exit(1);
     });
   });
 
-  ['SIGTERM', 'SIGINT', 'SIGQUIT'].forEach(function(signal) {
+  ['SIGTERM', 'SIGINT', 'SIGQUIT'].forEach(function (signal) {
     var name = '_' + signal.toLowerCase() + 'Handler';
-    process.on(signal, Screen[name] = function() {
+    process.on(signal, Screen[name] = function () {
       if (process.listeners(signal).length > 1) {
         return;
       }
-      nextTick(function() {
+      nextTick(function () {
         process.exit(0);
       });
     });
   });
 
-  process.on('exit', Screen._exitHandler = function() {
-    Screen.instances.slice().forEach(function(screen) {
+  process.on('exit', Screen._exitHandler = function () {
+    Screen.instances.slice().forEach(function (screen) {
       screen.destroy();
     });
   });
@@ -245,24 +246,24 @@ Screen.prototype.__proto__ = Node.prototype;
 
 Screen.prototype.type = 'screen';
 
-Screen.prototype.__defineGetter__('title', function() {
+Screen.prototype.__defineGetter__('title', function () {
   return this.program.title;
 });
 
-Screen.prototype.__defineSetter__('title', function(title) {
+Screen.prototype.__defineSetter__('title', function (title) {
   return this.program.title = title;
 });
 
-Screen.prototype.__defineGetter__('terminal', function() {
+Screen.prototype.__defineGetter__('terminal', function () {
   return this.program.terminal;
 });
 
-Screen.prototype.__defineSetter__('terminal', function(terminal) {
+Screen.prototype.__defineSetter__('terminal', function (terminal) {
   this.setTerminal(terminal);
   return this.program.terminal;
 });
 
-Screen.prototype.setTerminal = function(terminal) {
+Screen.prototype.setTerminal = function (terminal) {
   var entered = !!this.program.isAlt;
   if (entered) {
     this._buf = '';
@@ -276,7 +277,7 @@ Screen.prototype.setTerminal = function(terminal) {
   }
 };
 
-Screen.prototype.enter = function() {
+Screen.prototype.enter = function () {
   if (this.program.isAlt) return;
   if (!this.cursor._set) {
     if (this.options.cursor.shape) {
@@ -305,11 +306,11 @@ Screen.prototype.enter = function() {
   this.alloc();
 };
 
-Screen.prototype.leave = function() {
+Screen.prototype.leave = function () {
   if (!this.program.isAlt) return;
   this.program.put.keypad_local();
   if (this.program.scrollTop !== 0
-      || this.program.scrollBottom !== this.rows - 1) {
+    || this.program.scrollBottom !== this.rows - 1) {
     this.program.csr(0, this.height - 1);
   }
   // XXX For some reason if alloc/clear() is before this
@@ -331,7 +332,7 @@ Screen.prototype.leave = function() {
   }
 };
 
-Screen.prototype.postEnter = function() {
+Screen.prototype.postEnter = function () {
   var self = this;
   if (this.options.debug) {
     this.debugLog = new Log({
@@ -360,7 +361,7 @@ Screen.prototype.postEnter = function() {
       }
     });
 
-    this.debugLog.toggle = function() {
+    this.debugLog.toggle = function () {
       if (self.debugLog.hidden) {
         self.saveFocus();
         self.debugLog.show();
@@ -378,7 +379,7 @@ Screen.prototype.postEnter = function() {
   }
 
   if (this.options.warnings) {
-    this.on('warning', function(text) {
+    this.on('warning', function (text) {
       var warning = new Box({
         screen: self,
         parent: self,
@@ -395,7 +396,7 @@ Screen.prototype.postEnter = function() {
         tags: true
       });
       self.render();
-      var timeout = setTimeout(function() {
+      var timeout = setTimeout(function () {
         warning.destroy();
         self.render();
       }, 1500);
@@ -407,7 +408,7 @@ Screen.prototype.postEnter = function() {
 };
 
 Screen.prototype._destroy = Screen.prototype.destroy;
-Screen.prototype.destroy = function() {
+Screen.prototype.destroy = function () {
   this.leave();
 
   var index = Screen.instances.indexOf(this);
@@ -442,18 +443,18 @@ Screen.prototype.destroy = function() {
   this.program.destroy();
 };
 
-Screen.prototype.log = function() {
+Screen.prototype.log = function () {
   return this.program.log.apply(this.program, arguments);
 };
 
-Screen.prototype.debug = function() {
+Screen.prototype.debug = function () {
   if (this.debugLog) {
     this.debugLog.log.apply(this.debugLog, arguments);
   }
   return this.program.debug.apply(this.program, arguments);
 };
 
-Screen.prototype._listenMouse = function(el) {
+Screen.prototype._listenMouse = function (el) {
   var self = this;
 
   if (el && !~this.clickable.indexOf(el)) {
@@ -469,11 +470,11 @@ Screen.prototype._listenMouse = function(el) {
     this.program.setMouse({ sendFocus: true }, true);
   }
 
-  this.on('render', function() {
+  this.on('render', function () {
     self._needsClickableSort = true;
   });
 
-  this.program.on('mouse', function(data) {
+  this.program.on('mouse', function (data) {
     if (self.lockKeys) return;
 
     if (self._needsClickableSort) {
@@ -500,7 +501,7 @@ Screen.prototype._listenMouse = function(el) {
       if (!pos) continue;
 
       if (data.x >= pos.xi && data.x < pos.xl
-          && data.y >= pos.yi && data.y < pos.yl) {
+        && data.y >= pos.yi && data.y < pos.yl) {
         el.emit('mouse', data);
         if (data.action === 'mousedown') {
           self.mouseDown = el;
@@ -527,10 +528,10 @@ Screen.prototype._listenMouse = function(el) {
 
     // Just mouseover?
     if ((data.action === 'mousemove'
-        || data.action === 'mousedown'
-        || data.action === 'mouseup')
-        && self.hover
-        && !set) {
+      || data.action === 'mousedown'
+      || data.action === 'mouseup')
+      && self.hover
+      && !set) {
       self.hover.emit('mouseout', data);
       self.hover = null;
     }
@@ -551,18 +552,18 @@ Screen.prototype._listenMouse = function(el) {
   // });
 
   // Autofocus elements with the appropriate option.
-  this.on('element click', function(el) {
+  this.on('element click', function (el) {
     if (el.clickable === true && el.options.autoFocus !== false) {
       el.focus();
     }
   });
 };
 
-Screen.prototype.enableMouse = function(el) {
+Screen.prototype.enableMouse = function (el) {
   this._listenMouse(el);
 };
 
-Screen.prototype._listenKeys = function(el) {
+Screen.prototype._listenKeys = function (el) {
   var self = this;
 
   if (el && !~this.keyable.indexOf(el)) {
@@ -580,7 +581,7 @@ Screen.prototype._listenKeys = function(el) {
   // After the first keypress emitted, the handler
   // checks to make sure grabKeys, lockKeys, and focused
   // weren't changed, and handles those situations appropriately.
-  this.program.on('keypress', function(ch, key) {
+  this.program.on('keypress', function (ch, key) {
     if (self.lockKeys && !~self.ignoreLocked.indexOf(key.full)) {
       return;
     }
@@ -605,16 +606,16 @@ Screen.prototype._listenKeys = function(el) {
   });
 };
 
-Screen.prototype.enableKeys = function(el) {
+Screen.prototype.enableKeys = function (el) {
   this._listenKeys(el);
 };
 
-Screen.prototype.enableInput = function(el) {
+Screen.prototype.enableInput = function (el) {
   this._listenMouse(el);
   this._listenKeys(el);
 };
 
-Screen.prototype._initHover = function() {
+Screen.prototype._initHover = function () {
   var self = this;
 
   if (this._hoverText) {
@@ -638,14 +639,14 @@ Screen.prototype._initHover = function() {
     }
   });
 
-  this.on('mousemove', function(data) {
+  this.on('mousemove', function (data) {
     if (self._hoverText.detached) return;
     self._hoverText.rleft = data.x + 1;
     self._hoverText.rtop = data.y;
     self.render();
   });
 
-  this.on('element mouseover', function(el, data) {
+  this.on('element mouseover', function (el, data) {
     if (!el._hoverOptions) return;
     self._hoverText.parseTags = el.parseTags;
     self._hoverText.setContent(el._hoverOptions.text);
@@ -655,7 +656,7 @@ Screen.prototype._initHover = function() {
     self.render();
   });
 
-  this.on('element mouseout', function() {
+  this.on('element mouseout', function () {
     if (self._hoverText.detached) return;
     self._hoverText.detach();
     self.render();
@@ -664,7 +665,7 @@ Screen.prototype._initHover = function() {
   // XXX This can cause problems if the
   // terminal does not support allMotion.
   // Workaround: check to see if content is set.
-  this.on('element mouseup', function(el) {
+  this.on('element mouseup', function (el) {
     if (!self._hoverText.getContent()) return;
     if (!el._hoverOptions) return;
     self.append(self._hoverText);
@@ -672,23 +673,23 @@ Screen.prototype._initHover = function() {
   });
 };
 
-Screen.prototype.__defineGetter__('cols', function() {
+Screen.prototype.__defineGetter__('cols', function () {
   return this.program.cols;
 });
 
-Screen.prototype.__defineGetter__('rows', function() {
+Screen.prototype.__defineGetter__('rows', function () {
   return this.program.rows;
 });
 
-Screen.prototype.__defineGetter__('width', function() {
+Screen.prototype.__defineGetter__('width', function () {
   return this.program.cols;
 });
 
-Screen.prototype.__defineGetter__('height', function() {
+Screen.prototype.__defineGetter__('height', function () {
   return this.program.rows;
 });
 
-Screen.prototype.alloc = function(dirty) {
+Screen.prototype.alloc = function (dirty) {
   var x, y;
 
   this.lines = [];
@@ -711,11 +712,11 @@ Screen.prototype.alloc = function(dirty) {
   this.program.clear();
 };
 
-Screen.prototype.realloc = function() {
+Screen.prototype.realloc = function () {
   return this.alloc(true);
 };
 
-Screen.prototype.render = function() {
+Screen.prototype.render = function () {
   var self = this;
 
   if (this.destroyed) return;
@@ -732,7 +733,7 @@ Screen.prototype.render = function() {
   // be some overhead though.
   // this.screen.clearRegion(0, this.cols, 0, this.rows);
   this._ci = 0;
-  this.children.forEach(function(el) {
+  this.children.forEach(function (el) {
     el.index = self._ci++;
     //el._rendering = true;
     el.render();
@@ -757,7 +758,7 @@ Screen.prototype.render = function() {
   this.emit('render');
 };
 
-Screen.prototype.blankLine = function(ch, dirty) {
+Screen.prototype.blankLine = function (ch, dirty) {
   var out = [];
   for (var x = 0; x < this.cols; x++) {
     out[x] = [this.dattr, ch || ' '];
@@ -766,12 +767,12 @@ Screen.prototype.blankLine = function(ch, dirty) {
   return out;
 };
 
-Screen.prototype.insertLine = function(n, y, top, bottom) {
+Screen.prototype.insertLine = function (n, y, top, bottom) {
   // if (y === top) return this.insertLineNC(n, y, top, bottom);
 
   if (!this.tput.strings.change_scroll_region
-      || !this.tput.strings.delete_line
-      || !this.tput.strings.insert_line) return;
+    || !this.tput.strings.delete_line
+    || !this.tput.strings.insert_line) return;
 
   this._buf += this.tput.csr(top, bottom);
   this._buf += this.tput.cup(y, 0);
@@ -788,12 +789,12 @@ Screen.prototype.insertLine = function(n, y, top, bottom) {
   }
 };
 
-Screen.prototype.deleteLine = function(n, y, top, bottom) {
+Screen.prototype.deleteLine = function (n, y, top, bottom) {
   // if (y === top) return this.deleteLineNC(n, y, top, bottom);
 
   if (!this.tput.strings.change_scroll_region
-      || !this.tput.strings.delete_line
-      || !this.tput.strings.insert_line) return;
+    || !this.tput.strings.delete_line
+    || !this.tput.strings.insert_line) return;
 
   this._buf += this.tput.csr(top, bottom);
   this._buf += this.tput.cup(y, 0);
@@ -813,9 +814,9 @@ Screen.prototype.deleteLine = function(n, y, top, bottom) {
 // This is how ncurses does it.
 // Scroll down (up cursor-wise).
 // This will only work for top line deletion as opposed to arbitrary lines.
-Screen.prototype.insertLineNC = function(n, y, top, bottom) {
+Screen.prototype.insertLineNC = function (n, y, top, bottom) {
   if (!this.tput.strings.change_scroll_region
-      || !this.tput.strings.delete_line) return;
+    || !this.tput.strings.delete_line) return;
 
   this._buf += this.tput.csr(top, bottom);
   this._buf += this.tput.cup(top, 0);
@@ -835,9 +836,9 @@ Screen.prototype.insertLineNC = function(n, y, top, bottom) {
 // This is how ncurses does it.
 // Scroll up (down cursor-wise).
 // This will only work for bottom line deletion as opposed to arbitrary lines.
-Screen.prototype.deleteLineNC = function(n, y, top, bottom) {
+Screen.prototype.deleteLineNC = function (n, y, top, bottom) {
   if (!this.tput.strings.change_scroll_region
-      || !this.tput.strings.delete_line) return;
+    || !this.tput.strings.delete_line) return;
 
   this._buf += this.tput.csr(top, bottom);
   this._buf += this.tput.cup(bottom, 0);
@@ -854,19 +855,19 @@ Screen.prototype.deleteLineNC = function(n, y, top, bottom) {
   }
 };
 
-Screen.prototype.insertBottom = function(top, bottom) {
+Screen.prototype.insertBottom = function (top, bottom) {
   return this.deleteLine(1, top, top, bottom);
 };
 
-Screen.prototype.insertTop = function(top, bottom) {
+Screen.prototype.insertTop = function (top, bottom) {
   return this.insertLine(1, top, top, bottom);
 };
 
-Screen.prototype.deleteBottom = function(top, bottom) {
+Screen.prototype.deleteBottom = function (top, bottom) {
   return this.clearRegion(0, this.width, bottom, bottom);
 };
 
-Screen.prototype.deleteTop = function(top, bottom) {
+Screen.prototype.deleteTop = function (top, bottom) {
   // Same as: return this.insertBottom(top, bottom);
   return this.deleteLine(1, top, top, bottom);
 };
@@ -880,7 +881,7 @@ Screen.prototype.deleteTop = function(top, bottom) {
 // but will it be less or greater than the
 // performance hit of slow-rendering scrollable
 // boxes with clean sides?
-Screen.prototype.cleanSides = function(el) {
+Screen.prototype.cleanSides = function (el) {
   var pos = el.lpos;
 
   if (!pos) {
@@ -960,7 +961,7 @@ Screen.prototype.cleanSides = function(el) {
   return pos._cleanSides = true;
 };
 
-Screen.prototype._dockBorders = function() {
+Screen.prototype._dockBorders = function () {
   var lines = this.lines
     , stops = this._borderStops
     , i
@@ -981,8 +982,8 @@ Screen.prototype._dockBorders = function() {
   //   for (x = stop.xi; x < stop.xl; x++) {
 
   stops = Object.keys(stops)
-    .map(function(k) { return +k; })
-    .sort(function(a, b) { return a - b; });
+    .map(function (k) { return +k; })
+    .sort(function (a, b) { return a - b; });
 
   for (i = 0; i < stops.length; i++) {
     y = stops[i];
@@ -997,7 +998,7 @@ Screen.prototype._dockBorders = function() {
   }
 };
 
-Screen.prototype._getAngle = function(lines, x, y) {
+Screen.prototype._getAngle = function (lines, x, y) {
   var angle = 0
     , attr = lines[y][x][0]
     , ch = lines[y][x][1];
@@ -1050,7 +1051,7 @@ Screen.prototype._getAngle = function(lines, x, y) {
   return angleTable[angle] || ch;
 };
 
-Screen.prototype.draw = function(start, end) {
+Screen.prototype.draw = function (start, end) {
   // this.emit('predraw');
 
   var x
@@ -1101,10 +1102,10 @@ Screen.prototype.draw = function(start, end) {
 
       // Render the artificial cursor.
       if (this.cursor.artificial
-          && !this.cursor._hidden
-          && this.cursor._state
-          && x === this.program.x
-          && y === this.program.y) {
+        && !this.cursor._hidden
+        && this.cursor._state
+        && x === this.program.x
+        && y === this.program.y) {
         var cattr = this._cursorAttr(this.cursor, data);
         if (cattr.ch) ch = cattr.ch;
         data = cattr.attr;
@@ -1114,10 +1115,10 @@ Screen.prototype.draw = function(start, end) {
       // lookahead. Stop spitting out so many damn spaces. NOTE: Is checking
       // the bg for non BCE terminals worth the overhead?
       if (this.options.useBCE
-          && ch === ' '
-          && (this.tput.bools.back_color_erase
+        && ch === ' '
+        && (this.tput.bools.back_color_erase
           || (data & 0x1ff) === (this.dattr & 0x1ff))
-          && ((data >> 18) & 8) === ((this.dattr >> 18) & 8)) {
+        && ((data >> 18) & 8) === ((this.dattr >> 18) & 8)) {
         clr = true;
         neq = false;
 
@@ -1326,7 +1327,7 @@ Screen.prototype.draw = function(start, end) {
       // Maybe remove !this.tput.unicode check, however,
       // this seems to be the way ncurses does it.
       if (this.tput.strings.enter_alt_charset_mode
-          && !this.tput.brokenACS && (this.tput.acscr[ch] || acs)) {
+        && !this.tput.brokenACS && (this.tput.acscr[ch] || acs)) {
         // Fun fact: even if this.tput.brokenACS wasn't checked here,
         // the linux console would still work fine because the acs
         // table would fail the check of: this.tput.acscr[ch]
@@ -1396,12 +1397,12 @@ Screen.prototype.draw = function(start, end) {
   // this.emit('draw');
 };
 
-Screen.prototype._reduceColor = function(color) {
+Screen.prototype._reduceColor = function (color) {
   return colors.reduce(color, this.tput.colors);
 };
 
 // Convert an SGR string to our own attribute format.
-Screen.prototype.attrCode = function(code, cur, def) {
+Screen.prototype.attrCode = function (code, cur, def) {
   var flags = (cur >> 18) & 0x1ff
     , fg = (cur >> 9) & 0x1ff
     , bg = cur & 0x1ff
@@ -1460,23 +1461,23 @@ Screen.prototype.attrCode = function(code, cur, def) {
         bg = def & 0x1ff;
         break;
       default: // color
-        if (c === 48 && +code[i+1] === 5) {
+        if (c === 48 && +code[i + 1] === 5) {
           i += 2;
           bg = +code[i];
           break;
-        } else if (c === 48 && +code[i+1] === 2) {
+        } else if (c === 48 && +code[i + 1] === 2) {
           i += 2;
-          bg = colors.match(+code[i], +code[i+1], +code[i+2]);
+          bg = colors.match(+code[i], +code[i + 1], +code[i + 2]);
           if (bg === -1) bg = def & 0x1ff;
           i += 2;
           break;
-        } else if (c === 38 && +code[i+1] === 5) {
+        } else if (c === 38 && +code[i + 1] === 5) {
           i += 2;
           fg = +code[i];
           break;
-        } else if (c === 38 && +code[i+1] === 2) {
+        } else if (c === 38 && +code[i + 1] === 2) {
           i += 2;
-          fg = colors.match(+code[i], +code[i+1], +code[i+2]);
+          fg = colors.match(+code[i], +code[i + 1], +code[i + 2]);
           if (fg === -1) fg = (def >> 9) & 0x1ff;
           i += 2;
           break;
@@ -1507,7 +1508,7 @@ Screen.prototype.attrCode = function(code, cur, def) {
 };
 
 // Convert our own attribute format to an SGR string.
-Screen.prototype.codeAttr = function(code) {
+Screen.prototype.codeAttr = function (code) {
   var flags = (code >> 18) & 0x1ff
     , fg = (code >> 9) & 0x1ff
     , bg = code & 0x1ff
@@ -1573,8 +1574,8 @@ Screen.prototype.codeAttr = function(code) {
   return '\x1b[' + out + 'm';
 };
 
-Screen.prototype.focusOffset = function(offset) {
-  var shown = this.keyable.filter(function(el) {
+Screen.prototype.focusOffset = function (offset) {
+  var shown = this.keyable.filter(function (el) {
     return !el.detached && el.visible;
   }).length;
 
@@ -1602,15 +1603,15 @@ Screen.prototype.focusOffset = function(offset) {
 };
 
 Screen.prototype.focusPrev =
-Screen.prototype.focusPrevious = function() {
-  return this.focusOffset(-1);
-};
+  Screen.prototype.focusPrevious = function () {
+    return this.focusOffset(-1);
+  };
 
-Screen.prototype.focusNext = function() {
+Screen.prototype.focusNext = function () {
   return this.focusOffset(1);
 };
 
-Screen.prototype.focusPush = function(el) {
+Screen.prototype.focusPush = function (el) {
   if (!el) return;
   var old = this.history[this.history.length - 1];
   if (this.history.length === 10) {
@@ -1620,7 +1621,7 @@ Screen.prototype.focusPush = function(el) {
   this._focus(el, old);
 };
 
-Screen.prototype.focusPop = function() {
+Screen.prototype.focusPop = function () {
   var old = this.history.pop();
   if (this.history.length) {
     this._focus(this.history[this.history.length - 1], old);
@@ -1628,18 +1629,18 @@ Screen.prototype.focusPop = function() {
   return old;
 };
 
-Screen.prototype.saveFocus = function() {
+Screen.prototype.saveFocus = function () {
   return this._savedFocus = this.focused;
 };
 
-Screen.prototype.restoreFocus = function() {
+Screen.prototype.restoreFocus = function () {
   if (!this._savedFocus) return;
   this._savedFocus.focus();
   delete this._savedFocus;
   return this.focused;
 };
 
-Screen.prototype.rewindFocus = function() {
+Screen.prototype.rewindFocus = function () {
   var old = this.history.pop()
     , el;
 
@@ -1657,7 +1658,7 @@ Screen.prototype.rewindFocus = function() {
   }
 };
 
-Screen.prototype._focus = function(self, old) {
+Screen.prototype._focus = function (self, old) {
   // Find a scrollable ancestor if we have one.
   var el = self;
   while (el = el.parent) {
@@ -1689,19 +1690,19 @@ Screen.prototype._focus = function(self, old) {
   self.emit('focus', old);
 };
 
-Screen.prototype.__defineGetter__('focused', function() {
+Screen.prototype.__defineGetter__('focused', function () {
   return this.history[this.history.length - 1];
 });
 
-Screen.prototype.__defineSetter__('focused', function(el) {
+Screen.prototype.__defineSetter__('focused', function (el) {
   return this.focusPush(el);
 });
 
-Screen.prototype.clearRegion = function(xi, xl, yi, yl, override) {
+Screen.prototype.clearRegion = function (xi, xl, yi, yl, override) {
   return this.fillRegion(this.dattr, ' ', xi, xl, yi, yl, override);
 };
 
-Screen.prototype.fillRegion = function(attr, ch, xi, xl, yi, yl, override) {
+Screen.prototype.fillRegion = function (attr, ch, xi, xl, yi, yl, override) {
   var lines = this.lines
     , cell
     , xx;
@@ -1723,20 +1724,20 @@ Screen.prototype.fillRegion = function(attr, ch, xi, xl, yi, yl, override) {
   }
 };
 
-Screen.prototype.key = function() {
+Screen.prototype.key = function () {
   return this.program.key.apply(this, arguments);
 };
 
-Screen.prototype.onceKey = function() {
+Screen.prototype.onceKey = function () {
   return this.program.onceKey.apply(this, arguments);
 };
 
 Screen.prototype.unkey =
-Screen.prototype.removeKey = function() {
-  return this.program.unkey.apply(this, arguments);
-};
+  Screen.prototype.removeKey = function () {
+    return this.program.unkey.apply(this, arguments);
+  };
 
-Screen.prototype.spawn = function(file, args, options) {
+Screen.prototype.spawn = function (file, args, options) {
   if (!Array.isArray(args)) {
     options = args;
     args = [];
@@ -1759,13 +1760,13 @@ Screen.prototype.spawn = function(file, args, options) {
   if (mouse) program.disableMouse();
 
   var write = program.output.write;
-  program.output.write = function() {};
+  program.output.write = function () { };
   program.input.pause();
   if (program.input.setRawMode) {
     program.input.setRawMode(false);
   }
 
-  var resume = function() {
+  var resume = function () {
     if (resume.done) return;
     resume.done = true;
 
@@ -1799,15 +1800,15 @@ Screen.prototype.spawn = function(file, args, options) {
   return ps;
 };
 
-Screen.prototype.exec = function(file, args, options, callback) {
+Screen.prototype.exec = function (file, args, options, callback) {
   var ps = this.spawn(file, args, options);
 
-  ps.on('error', function(err) {
+  ps.on('error', function (err) {
     if (!callback) return;
     return callback(err, false);
   });
 
-  ps.on('exit', function(code) {
+  ps.on('exit', function (code) {
     if (!callback) return;
     return callback(null, code === 0);
   });
@@ -1815,7 +1816,7 @@ Screen.prototype.exec = function(file, args, options, callback) {
   return ps;
 };
 
-Screen.prototype.readEditor = function(options, callback) {
+Screen.prototype.readEditor = function (options, callback) {
   if (typeof options === 'string') {
     options = { editor: options };
   }
@@ -1826,7 +1827,7 @@ Screen.prototype.readEditor = function(options, callback) {
   }
 
   if (!callback) {
-    callback = function() {};
+    callback = function () { };
   }
 
   options = options || {};
@@ -1850,12 +1851,12 @@ Screen.prototype.readEditor = function(options, callback) {
     return fs.writeFile(file, options.value, callback);
   }
 
-  return writeFile(function(err) {
+  return writeFile(function (err) {
     if (err) return callback(err);
-    return self.exec(editor, args, opt, function(err, success) {
+    return self.exec(editor, args, opt, function (err, success) {
       if (err) return callback(err);
-      return fs.readFile(file, 'utf8', function(err, data) {
-        return fs.unlink(file, function() {
+      return fs.readFile(file, 'utf8', function (err, data) {
+        return fs.unlink(file, function () {
           if (!success) return callback(new Error('Unsuccessful.'));
           if (err) return callback(err);
           return callback(null, data);
@@ -1865,7 +1866,7 @@ Screen.prototype.readEditor = function(options, callback) {
   });
 };
 
-Screen.prototype.displayImage = function(file, callback) {
+Screen.prototype.displayImage = function (file, callback) {
   if (!file) {
     if (!callback) return;
     return callback(new Error('No image.'));
@@ -1890,12 +1891,12 @@ Screen.prototype.displayImage = function(file, callback) {
 
   var ps = this.spawn(args[0], args.slice(1), opt);
 
-  ps.on('error', function(err) {
+  ps.on('error', function (err) {
     if (!callback) return;
     return callback(err);
   });
 
-  ps.on('exit', function(code) {
+  ps.on('exit', function (code) {
     if (!callback) return;
     if (code !== 0) return callback(new Error('Exit Code: ' + code));
     return callback(null, code === 0);
@@ -1905,7 +1906,7 @@ Screen.prototype.displayImage = function(file, callback) {
   ps.stdin.end();
 };
 
-Screen.prototype.setEffects = function(el, fel, over, out, effects, temp) {
+Screen.prototype.setEffects = function (el, fel, over, out, effects, temp) {
   if (!effects) return;
 
   var tmp = {};
@@ -1913,17 +1914,17 @@ Screen.prototype.setEffects = function(el, fel, over, out, effects, temp) {
 
   if (typeof el !== 'function') {
     var _el = el;
-    el = function() { return _el; };
+    el = function () { return _el; };
   }
 
-  fel.on(over, function() {
+  fel.on(over, function () {
     var element = el();
-    Object.keys(effects).forEach(function(key) {
+    Object.keys(effects).forEach(function (key) {
       var val = effects[key];
       if (val !== null && typeof val === 'object') {
         tmp[key] = tmp[key] || {};
         // element.style[key] = element.style[key] || {};
-        Object.keys(val).forEach(function(k) {
+        Object.keys(val).forEach(function (k) {
           var v = val[k];
           tmp[key][k] = element.style[key][k];
           element.style[key][k] = v;
@@ -1936,14 +1937,14 @@ Screen.prototype.setEffects = function(el, fel, over, out, effects, temp) {
     element.screen.render();
   });
 
-  fel.on(out, function() {
+  fel.on(out, function () {
     var element = el();
-    Object.keys(effects).forEach(function(key) {
+    Object.keys(effects).forEach(function (key) {
       var val = effects[key];
       if (val !== null && typeof val === 'object') {
         tmp[key] = tmp[key] || {};
         // element.style[key] = element.style[key] || {};
-        Object.keys(val).forEach(function(k) {
+        Object.keys(val).forEach(function (k) {
           if (tmp[key].hasOwnProperty(k)) {
             element.style[key][k] = tmp[key][k];
           }
@@ -1958,9 +1959,9 @@ Screen.prototype.setEffects = function(el, fel, over, out, effects, temp) {
   });
 };
 
-Screen.prototype.sigtstp = function(callback) {
+Screen.prototype.sigtstp = function (callback) {
   var self = this;
-  this.program.sigtstp(function() {
+  this.program.sigtstp(function () {
     self.alloc();
     self.render();
     self.program.lrestoreCursor('pause', true);
@@ -1968,11 +1969,11 @@ Screen.prototype.sigtstp = function(callback) {
   });
 };
 
-Screen.prototype.copyToClipboard = function(text) {
+Screen.prototype.copyToClipboard = function (text) {
   return this.program.copyToClipboard(text);
 };
 
-Screen.prototype.cursorShape = function(shape, blink) {
+Screen.prototype.cursorShape = function (shape, blink) {
   var self = this;
 
   this.cursor.shape = shape || 'block';
@@ -1983,7 +1984,7 @@ Screen.prototype.cursorShape = function(shape, blink) {
     if (!this.program.hideCursor_old) {
       var hideCursor = this.program.hideCursor;
       this.program.hideCursor_old = this.program.hideCursor;
-      this.program.hideCursor = function() {
+      this.program.hideCursor = function () {
         hideCursor.call(self.program);
         self.cursor._hidden = true;
         if (self.renders) self.render();
@@ -1992,14 +1993,14 @@ Screen.prototype.cursorShape = function(shape, blink) {
     if (!this.program.showCursor_old) {
       var showCursor = this.program.showCursor;
       this.program.showCursor_old = this.program.showCursor;
-      this.program.showCursor = function() {
+      this.program.showCursor = function () {
         self.cursor._hidden = false;
         if (self.program._exiting) showCursor.call(self.program);
         if (self.renders) self.render();
       };
     }
     if (!this._cursorBlink) {
-      this._cursorBlink = setInterval(function() {
+      this._cursorBlink = setInterval(function () {
         if (!self.cursor.blink) return;
         self.cursor._state ^= 1;
         if (self.renders) self.render();
@@ -2014,7 +2015,7 @@ Screen.prototype.cursorShape = function(shape, blink) {
   return this.program.cursorShape(this.cursor.shape, this.cursor.blink);
 };
 
-Screen.prototype.cursorColor = function(color) {
+Screen.prototype.cursorColor = function (color) {
   this.cursor.color = color != null
     ? colors.convert(color)
     : null;
@@ -2028,33 +2029,33 @@ Screen.prototype.cursorColor = function(color) {
 };
 
 Screen.prototype.cursorReset =
-Screen.prototype.resetCursor = function() {
-  this.cursor.shape = 'block';
-  this.cursor.blink = false;
-  this.cursor.color = null;
-  this.cursor._set = false;
-
-  if (this.cursor.artificial) {
-    this.cursor.artificial = false;
-    if (this.program.hideCursor_old) {
-      this.program.hideCursor = this.program.hideCursor_old;
-      delete this.program.hideCursor_old;
-    }
-    if (this.program.showCursor_old) {
-      this.program.showCursor = this.program.showCursor_old;
-      delete this.program.showCursor_old;
-    }
-    if (this._cursorBlink) {
-      clearInterval(this._cursorBlink);
-      delete this._cursorBlink;
+  Screen.prototype.resetCursor = function () {
+    this.cursor.shape = 'block';
+    this.cursor.blink = false;
+    this.cursor.color = null;
+    this.cursor._set = false;
+
+    if (this.cursor.artificial) {
+      this.cursor.artificial = false;
+      if (this.program.hideCursor_old) {
+        this.program.hideCursor = this.program.hideCursor_old;
+        delete this.program.hideCursor_old;
+      }
+      if (this.program.showCursor_old) {
+        this.program.showCursor = this.program.showCursor_old;
+        delete this.program.showCursor_old;
+      }
+      if (this._cursorBlink) {
+        clearInterval(this._cursorBlink);
+        delete this._cursorBlink;
+      }
+      return true;
     }
-    return true;
-  }
 
-  return this.program.cursorReset();
-};
+    return this.program.cursorReset();
+  };
 
-Screen.prototype._cursorAttr = function(cursor, dattr) {
+Screen.prototype._cursorAttr = function (cursor, dattr) {
   var attr = dattr || this.dattr
     , cattr
     , ch;
@@ -2075,8 +2076,8 @@ Screen.prototype._cursorAttr = function(cursor, dattr) {
     cattr = Element.prototype.sattr.call(cursor, cursor.shape);
 
     if (cursor.shape.bold || cursor.shape.underline
-        || cursor.shape.blink || cursor.shape.inverse
-        || cursor.shape.invisible) {
+      || cursor.shape.blink || cursor.shape.inverse
+      || cursor.shape.invisible) {
       attr &= ~(0x1ff << 18);
       attr |= ((cattr >> 18) & 0x1ff) << 18;
     }
@@ -2107,7 +2108,7 @@ Screen.prototype._cursorAttr = function(cursor, dattr) {
   };
 };
 
-Screen.prototype.screenshot = function(xi, xl, yi, yl, term) {
+Screen.prototype.screenshot = function (xi, xl, yi, yl, term) {
   if (xi == null) xi = 0;
   if (xl == null) xl = this.cols;
   if (yi == null) yi = 0;
@@ -2198,7 +2199,7 @@ Screen.prototype.screenshot = function(xi, xl, yi, yl, term) {
  * Positioning
  */
 
-Screen.prototype._getPos = function() {
+Screen.prototype._getPos = function () {
   return this;
 };
 
@@ -2286,7 +2287,7 @@ var angleTable = {
   '1111': '\u253c'  // '┼'
 };
 
-Object.keys(angleTable).forEach(function(key) {
+Object.keys(angleTable).forEach(function (key) {
   angleTable[parseInt(key, 2)] = angleTable[key];
   delete angleTable[key];
 });
diff --git a/node_modules/blessed/lib/widgets/scrollablebox.js b/node_modules/blessed/lib/widgets/scrollablebox.js
index ce7310b..3d36141 100644
--- a/node_modules/blessed/lib/widgets/scrollablebox.js
+++ b/node_modules/blessed/lib/widgets/scrollablebox.js
@@ -68,7 +68,7 @@ function ScrollableBox(options) {
     }
     // Allow controlling of the scrollbar via the mouse:
     if (options.mouse) {
-      this.on('mousedown', function(data) {
+      this.on('mousedown', function (data) {
         if (self._scrollingBar) {
           // Do not allow dragging on the scrollbar:
           delete self.screen._dragging;
@@ -86,7 +86,7 @@ function ScrollableBox(options) {
           self.screen.render();
           var smd, smu;
           self._scrollingBar = true;
-          self.onScreenEvent('mousedown', smd = function(data) {
+          self.onScreenEvent('mousedown', smd = function (data) {
             var y = data.y - self.atop;
             var perc = y / self.height;
             self.setScrollPerc(perc * 100 | 0);
@@ -95,7 +95,7 @@ function ScrollableBox(options) {
           // If mouseup occurs out of the window, no mouseup event fires, and
           // scrollbar will drag again on mousedown until another mouseup
           // occurs.
-          self.onScreenEvent('mouseup', smu = function() {
+          self.onScreenEvent('mouseup', smu = function () {
             self._scrollingBar = false;
             self.removeScreenEvent('mousedown', smd);
             self.removeScreenEvent('mouseup', smu);
@@ -104,20 +104,20 @@ function ScrollableBox(options) {
       });
     }
   }
-
+  console.log('in scrollable')
   if (options.mouse) {
-    this.on('wheeldown', function() {
-      self.scroll(self.height / 2 | 0 || 1);
+    this.on('wheeldown', function () {
+      self.scroll(1);
       self.screen.render();
     });
-    this.on('wheelup', function() {
-      self.scroll(-(self.height / 2 | 0) || -1);
+    this.on('wheelup', function () {
+      self.scroll(-1);
       self.screen.render();
     });
   }
 
   if (options.keys && !options.ignoreKeys) {
-    this.on('keypress', function(ch, key) {
+    this.on('keypress', function (ch, key) {
       if (key.name === 'up' || (options.vi && key.name === 'k')) {
         self.scroll(-1);
         self.screen.render();
@@ -161,7 +161,7 @@ function ScrollableBox(options) {
     });
   }
 
-  this.on('parsed content', function() {
+  this.on('parsed content', function () {
     self._recalculateIndex();
   });
 
@@ -173,12 +173,12 @@ ScrollableBox.prototype.__proto__ = Box.prototype;
 ScrollableBox.prototype.type = 'scrollable-box';
 
 // XXX Potentially use this in place of scrollable checks elsewhere.
-ScrollableBox.prototype.__defineGetter__('reallyScrollable', function() {
+ScrollableBox.prototype.__defineGetter__('reallyScrollable', function () {
   if (this.shrink) return this.scrollable;
   return this.getScrollHeight() > this.height;
 });
 
-ScrollableBox.prototype._scrollBottom = function() {
+ScrollableBox.prototype._scrollBottom = function () {
   if (!this.scrollable) return 0;
 
   // We could just calculate the children, but we can
@@ -191,7 +191,7 @@ ScrollableBox.prototype._scrollBottom = function() {
     return this.lpos._scrollBottom;
   }
 
-  var bottom = this.children.reduce(function(current, el) {
+  var bottom = this.children.reduce(function (current, el) {
     // el.height alone does not calculate the shrunken height, we need to use
     // getCoords. A shrunken box inside a scrollable element will not grow any
     // larger than the scrollable element's context regardless of how much
@@ -216,18 +216,18 @@ ScrollableBox.prototype._scrollBottom = function() {
 };
 
 ScrollableBox.prototype.setScroll =
-ScrollableBox.prototype.scrollTo = function(offset, always) {
-  // XXX
-  // At first, this appeared to account for the first new calculation of childBase:
-  this.scroll(0);
-  return this.scroll(offset - (this.childBase + this.childOffset), always);
-};
-
-ScrollableBox.prototype.getScroll = function() {
+  ScrollableBox.prototype.scrollTo = function (offset, always) {
+    // XXX
+    // At first, this appeared to account for the first new calculation of childBase:
+    this.scroll(0);
+    return this.scroll(offset - (this.childBase + this.childOffset), always);
+  };
+
+ScrollableBox.prototype.getScroll = function () {
   return this.childBase + this.childOffset;
 };
 
-ScrollableBox.prototype.scroll = function(offset, always) {
+ScrollableBox.prototype.scroll = function (offset, always) {
   if (!this.scrollable) return;
 
   if (this.detached) return;
@@ -320,7 +320,7 @@ ScrollableBox.prototype.scroll = function(offset, always) {
   return this.emit('scroll');
 };
 
-ScrollableBox.prototype._recalculateIndex = function() {
+ScrollableBox.prototype._recalculateIndex = function () {
   var max, emax;
 
   if (this.detached || !this.scrollable) {
@@ -344,18 +344,18 @@ ScrollableBox.prototype._recalculateIndex = function() {
   }
 };
 
-ScrollableBox.prototype.resetScroll = function() {
+ScrollableBox.prototype.resetScroll = function () {
   if (!this.scrollable) return;
   this.childOffset = 0;
   this.childBase = 0;
   return this.emit('scroll');
 };
 
-ScrollableBox.prototype.getScrollHeight = function() {
+ScrollableBox.prototype.getScrollHeight = function () {
   return Math.max(this._clines.length, this._scrollBottom());
 };
 
-ScrollableBox.prototype.getScrollPerc = function(s) {
+ScrollableBox.prototype.getScrollPerc = function (s) {
   var pos = this.lpos || this._getCoords();
   if (!pos) return s ? -1 : 0;
 
@@ -375,7 +375,7 @@ ScrollableBox.prototype.getScrollPerc = function(s) {
   return s ? -1 : 0;
 };
 
-ScrollableBox.prototype.setScrollPerc = function(i) {
+ScrollableBox.prototype.setScrollPerc = function (i) {
   // XXX
   // var m = this.getScrollHeight();
   var m = Math.max(this._clines.length, this._scrollBottom());
